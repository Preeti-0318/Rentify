import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SpringBootApplication
public class RentifyApplication {

    public static void main(String[] args) {
        SpringApplication.run(RentifyApplication.class, args);
    }
}

@RestController
@RequestMapping("/api")
class UserController {

    private final Map<String, User> users = new HashMap<>();
    private final PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    @PostMapping("/register")
    public User registerUser(@RequestBody User user) {
        // Validate user input
        if (user.getEmail() == null || user.getPassword() == null) {
            throw new IllegalArgumentException("Email and password are required.");
        }

        // Check if email already exists
        if (users.containsKey(user.getEmail())) {
            throw new IllegalArgumentException("Email already registered.");
        }

        // Encrypt password
        String encodedPassword = passwordEncoder.encode(user.getPassword());
        user.setPassword(encodedPassword);

        // Save user
        users.put(user.getEmail(), user);
        return user;
    }

    @PostMapping("/login")
    public User loginUser(@RequestBody LoginRequest loginRequest) {
        User user = users.get(loginRequest.getEmail());
        if (user != null && passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {
            return user;
        } else {
            throw new IllegalArgumentException("Invalid email or password.");
        }
    }
}

@RestController
@RequestMapping("/api/properties")
class PropertyController {

    private final List<Property> properties = new ArrayList<>();

    @GetMapping
    public List<Property> getAllProperties() {
        return properties;
    }

    @PostMapping
    public Property postProperty(@RequestBody Property property) {
        // Validate property input
        if (property.getTitle() == null || property.getLocation() == null) {
            throw new IllegalArgumentException("Title and location are required.");
        }

        properties.add(property);
        return property;
    }
}

class User {
    private String firstName;
    private String lastName;
    private String email;
    private String phone;
    private String password;

    // Getters and setters
}

class Property {
    private String title;
    private String location;
    private int bedrooms;
    private int bathrooms;

    // Getters and setters
}

class LoginRequest {
    private String email;
    private String password;

    // Getters and setters
}
